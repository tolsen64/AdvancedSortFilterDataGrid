Imports System.ComponentModel
Imports System.Data
Imports System.Reflection
Imports System.Text
Imports System.Collections.ObjectModel
Imports System.Text.RegularExpressions
Imports BoycoT
Imports System.Windows.Media
Imports System.Collections
Imports System
Imports System.Windows.Controls
Imports System.Windows
Imports System.Threading.Tasks
Imports System.Windows.Input
Imports System.Collections.Generic
Imports System.Windows.Media.Imaging
Imports System.Linq
Imports Microsoft.VisualBasic
Imports System.Diagnostics

Public Class AdvancedSortFilterDataGrid

    Private SortDirections As New Hashtable
    Private ColumnIcons As New Hashtable
    Private cm As ContextMenu = Nothing
    Private Filters As New Hashtable
    Private WithEvents _timer As New Timers.Timer(500)

    Public Sub SetColumnSortOrder(colName As String, OrderBy As String)
        Dim lsd As ListSortDirection = DirectCast([Enum].Parse(GetType(ListSortDirection), OrderBy), ListSortDirection)
        If SortDirections.ContainsKey(colName) Then
            SortDirections(colName) = lsd
        Else
            SortDirections.Add(colName, lsd)
        End If
        If ColumnIcons.ContainsKey(colName) Then
            ColumnIcons(colName) = ColumnIcons(colName).ToString.Replace("SortAsc", "").Replace("SortDesc", "")
            Select Case OrderBy
                Case "Ascending" : ColumnIcons(colName) = ColumnIcons(colName).ToString & "SortAsc"
                Case "Descending" : ColumnIcons(colName) = ColumnIcons(colName).ToString & "SortDesc"
            End Select
        Else
            Select Case OrderBy
                Case "Ascending" : ColumnIcons.Add(colName, "SortAsc")
                Case "Descending" : ColumnIcons.Add(colName, "SortDesc")
            End Select
        End If
    End Sub

    Private Sub dataGrid_AutoGeneratingColumn(sender As Object, e As DataGridAutoGeneratingColumnEventArgs) Handles dataGrid.AutoGeneratingColumn
        'Debug.WriteLine("AutoGeneratingColumn(" & e.Column.Header.ToString & ")")
        If SortDirections.ContainsKey(e.Column.Header) Then
            'SortDirections(e.Column.Header) = e.Column.SortDirection
        Else
            SortDirections.Add(e.Column.Header, e.Column.SortDirection)
        End If

        If ColumnIcons.ContainsKey(e.Column.Header) Then
            'ColumnIcons(e.Column.Header) = ""
        Else
            ColumnIcons.Add(e.Column.Header, "")
        End If

        If Filters.ContainsKey(e.Column.Header) Then
            'Filters(e.Column.Header) = "(1=1)"
        Else
            Filters.Add(e.Column.Header, "(1=1)")
        End If

        SetColumnSortImage(e.Column)

        RaiseEvent AutoGeneratingColumn(Me, e)
    End Sub

    Private Sub ExcelFilterDataGrid_Loaded(sender As Object, e As RoutedEventArgs) Handles MyBase.Loaded
        cm = DirectCast(MyBase.Resources("sortContextMenu"), ContextMenu)
        'cm.IsOpen = True   'not needed. makes funny stuff happen on HP laptops.
        'cm.IsOpen = False
        RaiseEvent Loaded(Me, e)
    End Sub

    'No matter what I tried with calling SetColumnSortImages from the working thread, it just would'nt work. So I had to
    'implement this timer method. The timer gets started when AutoGeneratedColumns is fired...
    Private Sub dataGrid_AutoGeneratedColumns(sender As Object, e As EventArgs) Handles dataGrid.AutoGeneratedColumns
        _timer.Start()
    End Sub

    'Then when the timer fires, it checks to see if the sort buttons exist. If so, stop the timer and
    'call SetColumnSortImages.
    Private Sub Timer_Elapsed(sender As Object, e As Timers.ElapsedEventArgs) Handles _timer.Elapsed
        'Debug.WriteLine("Timer_Elapsed")
        _timer.Stop()
        If TypeOf dataGrid.ItemsSource Is DataView Then
            If SortButtonsExist() Then
                Dispatcher.BeginInvoke(Sub() SetColumnSortImages())
            Else
                _timer.Start()
            End If
        Else
            _timer.Start()
        End If
    End Sub

    'And I have to call this to start the timer manually when needed.
    Public Sub UpdateColumnSortImages()
        'Debug.WriteLine("UpdateColumnSortImages: ")
        _timer.Start()
    End Sub

    Private Sub ExcelFilterButton_Click(sender As Object, e As RoutedEventArgs)
        With cm     'DirectCast(Resources("sortContextMenu"), ContextMenu)
            .Tag = DirectCast(sender, Button).Tag

            .PlacementTarget = DirectCast(sender, Button)
            .IsOpen = True

            Dim mi As MenuItem = Nothing
            GetContextMenuItem(Nothing, "miListBox", mi)
            Dim tb As TextBox = GetChildOfType(Of TextBox)(CType(mi.Header, DependencyObject))
            tb.Clear()
            Dim lb As ListBox = GetChildOfType(Of ListBox)(CType(mi.Header, DependencyObject))
            lb.Tag = .Tag
            lb.ItemsSource = Nothing
            lb.Items.Clear()

            Dim totalstart As DateTime = DateTime.Now
            Dim start As DateTime = DateTime.Now

            Dim dt As DataTable = CType(dataGrid.ItemsSource, DataView).ToTable(False, .Tag.ToString)

            Task.Run(Sub()
                         If dt.Rows.Count > 0 Then
                             Dim dv As DataView = (From r As DataRow In dt.AsEnumerable.Distinct(System.Data.DataRowComparer.Default) Order By r.Item(0).ToString Ascending Select r).CopyToDataTable().DefaultView
                             Dim dc As New DataColumn("IsChecked", GetType(Boolean)) With {.DefaultValue = False}
                             dv.Table.Columns.Add(dc)
                             Dispatcher.BeginInvoke(Sub()
                                                        'lb.Items.Clear()
                                                        lb.ItemsSource = dv
                                                    End Sub)
                         End If
                     End Sub)

            lb.DisplayMemberPath = .Tag.ToString
        End With
    End Sub

    Private Sub GetContextMenuItem(mi As MenuItem, Name As String, ByRef out As MenuItem)
        If mi Is Nothing Then
            With cm 'DirectCast(Resources("sortContextMenu"), ContextMenu)
                For Each m As Object In .Items
                    If TypeOf m Is MenuItem Then
                        Dim mm As MenuItem = CType(m, MenuItem)
                        If mm.Name = Name Then
                            out = CType(m, MenuItem)
                            Exit Sub
                        ElseIf mm.HasItems Then
                            GetContextMenuItem(mm, Name, out)
                        End If
                    End If
                Next
            End With
        Else
            For Each m As Object In mi.Items
                If TypeOf m Is MenuItem Then
                    Dim mm As MenuItem = CType(m, MenuItem)
                    If mm.Name = Name Then
                        out = mm
                        Exit Sub
                    ElseIf mm.HasItems Then
                        GetContextMenuItem(mm, Name, out)
                    End If
                End If
            Next
        End If
    End Sub

    Private Sub ContextMenuItem_Click(Sender As Object, e As RoutedEventArgs)
        If TypeOf Sender Is MenuItem Then
            Dim mi As MenuItem = CType(Sender, MenuItem)
            Dim colName As String = mi.Tag.ToString

            If TypeOf mi.Header Is String Then
                If Not SortDirections.ContainsKey(colName) Then SortDirections.Add(colName, Nothing)
                If Not Filters.ContainsKey(colName) Then Filters.Add(colName, "(1=1)")
                If Not ColumnIcons.ContainsKey(colName) Then ColumnIcons.Add(colName, "")

                Select Case mi.Header.ToString
                    Case "Freeze To This Column"
                        dataGrid.FrozenColumnCount = dataGrid.Columns.Single(Function(c) c.Header.ToString() = colName).DisplayIndex + 1
                    Case "Unfreeze All Columns"
                        dataGrid.FrozenColumnCount = 0
                    Case "Clear All Filters"
                        For Each Key As String In Filters.Keys.Cast(Of String).ToList
                            If ColumnIcons(Key) IsNot Nothing Then
                                Filters(Key) = "(1=1)"
                                ColumnIcons(Key) = ColumnIcons(Key).ToString.Replace("Filtered", "")
                                SetColumnSortImage(Key)
                            End If
                        Next
                        ApplyRowFilters(True)
                        RaiseEvent ColumnFilterChanged(Me, New ColumnFilterChangedEventArgs(colName, ""))
                    Case "Clear Sort"
                        SortDirections(colName) = Nothing
                        ApplySortDescriptions()
                    Case "Sort Smallest to Largest"
                        SortDirections(colName) = ListSortDirection.Ascending
                        ApplySortDescriptions()
                    Case "Sort Largest to Smallest"
                        SortDirections(colName) = ListSortDirection.Descending
                        ApplySortDescriptions()
                    Case "Clear Filter"
                        Filters(colName) = "(1=1)"
                        ColumnIcons(colName) = ColumnIcons(colName).ToString.Replace("Filtered", "")
                        SetColumnSortImage(colName)
                        ApplyRowFilters(True)
                        RaiseEvent ColumnFilterChanged(Me, New ColumnFilterChangedEventArgs(colName, ""))
                    Case "Equals...", "Does Not Equal...", "Greater Than...", "Greater Than Or Equal To...", "Less Than...", "Less Than Or Equal To...", "Between...", "Begins With...", "Ends With...", "Contains...", "Does Not Contain..."
                        Dim filterValue As String = ""
                        Select Case CType(mi.Parent, MenuItem).Header.ToString
                            Case "Date Filters" : filterValue = GetFilterValue(colName, dlgFilter.FilterType.FilterTypeDate, mi.Header.ToString)
                            Case "Number Filters" : filterValue = GetFilterValue(colName, dlgFilter.FilterType.FilterTypeNumeric, mi.Header.ToString)
                            Case "Text Filters" : filterValue = GetFilterValue(colName, dlgFilter.FilterType.FilterTypeString, mi.Header.ToString)
                        End Select
                        If filterValue <> "" Then
                            Dim fltrOrig As String = Filters(colName).ToString
                            Filters(colName) = filterValue
                            If ApplyRowFilters(True) Then
                                ColumnIcons(colName) = ColumnIcons(colName).ToString & "Filtered"
                                SetColumnSortImage(colName)
                                RaiseEvent ColumnFilterChanged(Me, New ColumnFilterChangedEventArgs(colName, filterValue))
                            Else
                                Filters(colName) = fltrOrig
                            End If
                        End If
                End Select
            End If
        End If
    End Sub

    Private Function GetFilterValue(colName As String, FilterType As dlgFilter.FilterType, FilterChoice As String) As String
        With New dlgFilter(colName, FilterType, FilterChoice)
            If .ShowDialog = Forms.DialogResult.OK Then
                Return .Filter
            Else
                Return ""
            End If
        End With
    End Function

    Public Function ApplyRowFilters(Optional UserInitiated As Boolean = False) As Boolean
        Dim dv As DataView = DirectCast(dataGrid.ItemsSource, DataView)
        Dim s As String = ""
        For Each Filter As String In Filters.Values
            s &= Filter & " AND "
        Next
        s = s.TrimEnd({" "c, "A"c, "N"c, "D"c})
        Dim RowFilter As String = dv.RowFilter
        'Debug.WriteLine("s: " & s)
        'Debug.WriteLine("dv.RowFilter: " & dv.RowFilter)
        Try
            Dim tmp As String = dv.RowFilter
            dv.RowFilter = s
            If dv.Count = 0 Then
                If UserInitiated Then MessageBox.Show("This filter results in an empty grid. It will now be undone.", "Filter Message", MessageBoxButton.OK, MessageBoxImage.Exclamation)
                dv.RowFilter = tmp
                Dim keys As New List(Of String)
                For Each key As String In Filters.Keys
                    keys.Add(key)
                Next
                For Each key As String In keys
                    If Not tmp.Contains(Filters(key).ToString) Then Filters(key) = "(1=1)"
                Next
                UpdateColumnSortImages()
            End If
            dataGrid.UpdateLayout()
            Return True
        Catch ex As Exception
            dv.RowFilter = RowFilter
            Dim msg As String = ex.Message
            If msg.Contains("System.String") AndAlso msg.Contains("System.Int32") Then
                msg &= vbCrLf & vbCrLf & "Column contains non-numeric values. Use a Text Filter instead."
            End If
            MsgBox(msg, MsgBoxStyle.Exclamation, "Filter Message")
            Return False
        End Try
    End Function

    Private Function SortButtonsExist() As Boolean
        Return _
        Dispatcher.Invoke(Function()
                              Try
                                  Dim btn As Button = Nothing
                                  GetSortButton(Of Button)(dataGrid, dataGrid.Columns(0).Header.ToString, btn)
                                  Return btn IsNot Nothing
                              Catch
                                  Return False
                              End Try
                          End Function)
    End Function

    Private Sub SetColumnSortImages()
        'Debug.WriteLine("SetColumnSortImages: ")
        Dim RowFilter As String = CType(dataGrid.ItemsSource, DataView).RowFilter
        For Each c As DataGridColumn In dataGrid.Columns
            If RowFilter.Contains("[" & c.Header.ToString & "]") Then
                If Not ColumnIcons(c.Header).ToString.Contains("Filtered") Then ColumnIcons(c.Header) = ColumnIcons(c.Header).ToString & "Filtered"
            Else
                ColumnIcons(c.Header) = ColumnIcons(c.Header).ToString.Replace("Filtered", "")
            End If
            SetColumnSortImage(c)
        Next
        LoadFavoriteButtons()   ' had to put this here so it wouldn't double-add the favorites buttons. 
    End Sub

    Private Sub SetColumnSortImage(colName As String)
        'Debug.WriteLine("SetColumnSortImage(" & colName & ") : ")
        For Each c As DataGridColumn In dataGrid.Columns
            'Debug.WriteLine("c.Header=" & c.Header.ToString & "; colName=" & colName)
            If c.Header.ToString = colName Then
                SetColumnSortImage(c)
            End If
        Next
    End Sub
    Private Sub SetColumnSortImage(col As DataGridColumn)
        Dim btn As Button = Nothing
        GetSortButton(Of Button)(dataGrid, col.Header.ToString, btn)
        If btn IsNot Nothing Then
            Dim img As Image = GetChildOfType(Of Image)(btn)
            Dim ImageName As String = ""
            Dim colIcon As String = ColumnIcons(col.Header).ToString
            If colIcon.Contains("SortAsc") Then ImageName = "SortAsc"
            If colIcon.Contains("SortDesc") Then ImageName = "SortDesc"
            If colIcon.Contains("Filtered") Then ImageName &= "Filtered"
            If ImageName = "" Then ImageName = "NoSortNoFilter"
            'Debug.WriteLine("ImageName = " & ImageName & ": " & col.Header.ToString)
            img.Source = New BitmapImage(New Uri($"pack://application:,,,/AdvancedSortFilterDataGrid;component/Resources/{ImageName}.png"))
            'img.Source = New BitmapImage(New Uri($"Resources/{ImageName}.png", UriKind.Relative))
        End If
    End Sub

    Private Function GetSortButton(Tag As String) As Boolean
        Dim btn As Button = Nothing
        GetSortButton(Of Button)(dataGrid, Tag, btn)
        If btn Is Nothing Then
            GetChildOfType(Of Button)(dataGrid, Tag, btn)
        End If
        Return btn IsNot Nothing
    End Function

    Private Sub GetSortButton(Of T As DependencyObject)(dep As DependencyObject, Tag As String, ByRef out As T)
        If out IsNot Nothing AndAlso TypeOf out Is Button Then
            Dim x As Type = out.GetType
            Dim prop As PropertyInfo = x.GetProperty("Tag")
            If prop.GetValue(out).ToString = Tag Then
                Exit Sub
            End If
        End If
        If dep IsNot Nothing Then
            If TypeOf dep Is Button Then
                Dim btn As Button = CType(dep, Button)
                If btn.Tag IsNot Nothing AndAlso btn.Tag.ToString = Tag Then out = CType(dep, T)
            ElseIf TypeOf dep Is TextBlock Then
                Dim txt As TextBlock = CType(dep, TextBlock)
            Else
                If VisualTreeHelper.GetChildrenCount(dep) > 0 Then
                    For i As Integer = 0 To VisualTreeHelper.GetChildrenCount(dep) - 1
                        GetSortButton(Of T)(VisualTreeHelper.GetChild(dep, i), Tag, out)
                    Next
                End If
            End If
        End If
    End Sub

    Private Sub GetChildOfType(Of T As DependencyObject)(dep As DependencyObject, NameOrTag As String, ByRef out As T)
        If out IsNot Nothing Then Exit Sub

        If dep IsNot Nothing Then
            If TypeOf dep Is T Then
                If checkField(CType(dep, Object), "Name") AndAlso dep.GetValue(FrameworkElement.NameProperty).ToString = NameOrTag Then
                    out = CType(dep, T)
                Else
                    For i As Integer = 0 To VisualTreeHelper.GetChildrenCount(dep) - 1
                        GetChildOfType(Of T)(VisualTreeHelper.GetChild(dep, i), NameOrTag, out)
                    Next
                End If
            Else
                For i As Integer = 0 To VisualTreeHelper.GetChildrenCount(dep) - 1
                    GetChildOfType(Of T)(VisualTreeHelper.GetChild(dep, i), NameOrTag, out)
                Next
            End If
        End If
    End Sub

    Public Function checkField(ByVal objectt As Object, ByVal fieldName As String) As Boolean
        Dim result As Boolean = False
        Dim type As Type = objectt.GetType
        result = type.GetField(fieldName) IsNot Nothing
        If result Then Return True
        result = type.GetProperty(fieldName) IsNot Nothing
        If result Then Return True
        result = type.GetMember(fieldName) IsNot Nothing
        If result Then Return True

        Return False
    End Function

    Private Function GetColumnIndex(ColumnName As String) As Integer
        For i As Integer = 0 To dataGrid.Columns.Count - 1
            If dataGrid.Columns(i).Header.ToString = ColumnName Then Return i
        Next
        Return -1
    End Function

    '<System.Runtime.CompilerServices.Extension>
    Private Function GetChildOfType(Of T As DependencyObject)(depObj As DependencyObject) As T
        If depObj Is Nothing Then
            Return Nothing
        End If
        For i As Integer = 0 To VisualTreeHelper.GetChildrenCount(depObj) - 1
            Dim child As DependencyObject = VisualTreeHelper.GetChild(depObj, i)

            Dim result As T = If(TryCast(child, T), GetChildOfType(Of T)(child))
            If result IsNot Nothing Then
                Return result
            End If
        Next
        Return Nothing
    End Function

    Public Sub ApplySortDescriptions()
        'Debug.WriteLine("ApplySortDescriptions: " & Me.Name)
        dataGrid.Items.SortDescriptions.Clear()
        For Each col As DataGridColumn In dataGrid.Columns
            Dim colIcon As String = ColumnIcons(col.Header).ToString.Replace("SortAsc", "").Replace("SortDesc", "")
            If SortDirections(col.Header) IsNot Nothing Then
                Dim sortDirection As ListSortDirection = CType(SortDirections(col.Header), ListSortDirection)
                dataGrid.Items.SortDescriptions.Add(New SortDescription(col.SortMemberPath, sortDirection))
                colIcon &= If(sortDirection = ListSortDirection.Ascending, "SortAsc", "SortDesc")
            End If
            ColumnIcons(col.Header) = colIcon
            SetColumnSortImage(col)
        Next
        dataGrid.Items.Refresh()
    End Sub

    Private lastButtonClicked As Button = Nothing
    Private Sub Button_Click(sender As Object, e As RoutedEventArgs)
        Dim btn As Button = CType(sender, Button)
        Dim lb As ListBox = GetChildOfType(Of ListBox)(cm)
        Dim dv As DataView = CType(lb.ItemsSource, DataView)
        Dim dt As DataTable = dv.Table
        Dim colName As String = lb.Tag.ToString

        If Not SortDirections.ContainsKey(colName) Then SortDirections.Add(colName, Nothing)
        If Not Filters.ContainsKey(colName) Then Filters.Add(colName, "(1=1)")
        If Not ColumnIcons.ContainsKey(colName) Then ColumnIcons.Add(colName, "")

        Select Case btn.Tag.ToString
            Case "Check All"
                dt.Columns.Remove("IsChecked")
                Dim dc As New DataColumn("IsChecked", GetType(Boolean)) With {.DefaultValue = True}
                dt.Columns.Add(dc)
            Case "Uncheck All"
                dt.Columns.Remove("IsChecked")
                Dim dc As New DataColumn("IsChecked", GetType(Boolean)) With {.DefaultValue = False}
                dt.Columns.Add(dc)
            Case "Ok"
                cm.IsOpen = False
                Dim sb As New StringBuilder
                Dim selCount As Integer = 0
                For Each dr As DataRow In dv.ToTable.Select("IsChecked=True")
                    selCount += 1
                    If selCount < 100 Then
                        sb.Append("'" & dr(0).ToString.Replace("'", "''") & "',")
                    Else
                        MsgBox("Only 100 selections are allowed. You have too many selected.", MsgBoxStyle.Exclamation)
                        Exit Sub
                    End If
                Next
                If sb.Length > 0 Then sb.Remove(sb.Length - 1, 1)
                Dim str As String = "[" & colName & "] IN (" & sb.ToString & ")"
                Dim fltrOrig As String = Filters(colName).ToString
                Filters(colName) = str
                If ApplyRowFilters() Then
                    ColumnIcons(colName) = ColumnIcons(colName).ToString & "Filtered"
                    SetColumnSortImage(colName)
                    RaiseEvent ColumnFilterChanged(Me, New ColumnFilterChangedEventArgs(colName, str))
                Else
                    Filters(colName) = fltrOrig
                End If
            Case "Cancel"
                cm.IsOpen = False
            Case Else
        End Select
    End Sub

    Private Sub cmTextBox_TextChanged(sender As Object, e As TextChangedEventArgs)
        Dim txt As TextBox = DirectCast(sender, TextBox)
        Dim lb As ListBox = GetChildOfType(Of ListBox)(cm)
        Dim dv As DataView = DirectCast(lb.ItemsSource, DataView)
        If dv IsNot Nothing Then
            dv.RowFilter = "[" & lb.Tag.ToString & "] LIKE '%" & txt.Text.Replace("'", "''") & "%'"
        Else
            MsgBox("Please wait until the list below the textbox populates.", MsgBoxStyle.Exclamation)
        End If
    End Sub

    Public Sub ClearRowFilters()
        For i As Integer = 0 To Filters.Keys.Count - 1
            Filters(Filters.Keys(i)) = "(1=1)"
        Next
    End Sub

#Region "Properties"

    Public Property AlternatingRowBackground As Brush
        Get
            Return dataGrid.AlternatingRowBackground
        End Get
        Set(value As Brush)
            dataGrid.AlternatingRowBackground = value
        End Set
    End Property

    Public Property AutoGenerateColumns As Boolean
        Get
            Return dataGrid.AutoGenerateColumns
        End Get
        Set(value As Boolean)
            dataGrid.AutoGenerateColumns = value
        End Set
    End Property

    Public ReadOnly Property Columns As ObservableCollection(Of DataGridColumn)
        Get
            Return dataGrid.Columns
        End Get
    End Property

    Public Shadows Property ContextMenu As ContextMenu
        Get
            Return dataGrid.ContextMenu
        End Get
        Set(value As ContextMenu)
            dataGrid.ContextMenu = value
        End Set
    End Property

    Public Property DragSource As Boolean

    Public ReadOnly Property HasItems As Boolean
        Get
            Return dataGrid.HasItems
        End Get
    End Property

    Private _HideFavoritesBar As Boolean = False
    Public WriteOnly Property HideFavoritesBar As Boolean
        Set(value As Boolean)
            _HideFavoritesBar = value
            If value Then
                toolBar.Visibility = Visibility.Collapsed
                Grid.SetRow(dataGrid, 0)
                Grid.SetRowSpan(dataGrid, 2)
            Else
                toolBar.Visibility = Visibility.Visible
                Grid.SetRow(dataGrid, 1)
                Grid.SetRowSpan(dataGrid, 1)
            End If
        End Set
    End Property

    Public Property IsReadOnly As Boolean
        Get
            Return dataGrid.IsReadOnly
        End Get
        Set(value As Boolean)
            dataGrid.IsReadOnly = value
        End Set
    End Property

    Public ReadOnly Property Items As System.Windows.Controls.ItemCollection
        Get
            Return dataGrid.Items
        End Get
    End Property

    Public Property ItemsSource As System.Collections.IEnumerable
        Get
            Return dataGrid.ItemsSource
        End Get
        Set(value As System.Collections.IEnumerable)
            dataGrid.ItemsSource = value
        End Set
    End Property

    Public Shadows Property Resources As ResourceDictionary
        Get
            If dataGrid.Resources.MergedDictionaries.Count < 2 Then
                Return Nothing
            Else
                Return dataGrid.Resources.MergedDictionaries(1)
            End If
        End Get
        Set(value As ResourceDictionary)
            Do Until dataGrid.Resources.MergedDictionaries.Count = 1
                dataGrid.Resources.MergedDictionaries.RemoveAt(1)
            Loop
            dataGrid.Resources.MergedDictionaries.Add(value)
        End Set
    End Property

    Public Property RowDetailsTemplate As DataTemplate
        Get
            Return dataGrid.RowDetailsTemplate
        End Get
        Set(value As DataTemplate)
            dataGrid.RowDetailsTemplate = value
        End Set
    End Property

    Public Property RowDetailsVisibilityMode As DataGridRowDetailsVisibilityMode
        Get
            Return dataGrid.RowDetailsVisibilityMode
        End Get
        Set(value As DataGridRowDetailsVisibilityMode)
            dataGrid.RowDetailsVisibilityMode = value
        End Set
    End Property

    Public Property RowFilterDefinitions As Hashtable
        Get
            Return Filters
        End Get
        Set(value As Hashtable)
            Filters = value
        End Set
    End Property

    Public Property RowFilter(ColumnName As String) As String
        Get
            Return Filters(ColumnName).ToString
        End Get
        Set(value As String)
            If Not Filters.ContainsKey(ColumnName) Then
                Filters.Add(ColumnName, value)
            Else
                Filters(ColumnName) = value
            End If
        End Set
    End Property

    Public Property RowHeight As Double
        Get
            Return dataGrid.RowHeight
        End Get
        Set(value As Double)
            dataGrid.RowHeight = value
        End Set
    End Property

    Public Property RowStyle As Style
        Get
            Return dataGrid.RowStyle
        End Get
        Set(value As Style)
            dataGrid.RowStyle = value
        End Set
    End Property

    Public ReadOnly Property SelectedItems As IList
        Get
            Return dataGrid.SelectedItems
        End Get
    End Property

    Public Shadows Property Tag As String
        Get
            Return dataGrid.Tag & ""
        End Get
        Set(value As String)
            dataGrid.Tag = value
        End Set
    End Property


    Public Property SortDescriptions As Hashtable
        Get
            Return SortDirections
        End Get
        Set(value As Hashtable)
            SortDirections = value
        End Set
    End Property
#End Region

#Region "Events"

    Public Event AutoGeneratingColumn(sender As Object, e As DataGridAutoGeneratingColumnEventArgs)
    Public Shadows Event Loaded(sender As Object, e As RoutedEventArgs)

    Public Shadows Event MouseRightButtonDown(sender As Object, e As MouseButtonEventArgs)
    Private Sub dataGrid_MouseRightButtonDown(sender As Object, e As MouseButtonEventArgs) Handles dataGrid.MouseRightButtonDown
        RaiseEvent MouseRightButtonDown(Me, e)
    End Sub

    Public Shadows Event PreviewMouseRightButtonDown(sender As Object, e As MouseButtonEventArgs)
    Private Sub dataGrid_PreviewMouseRightButtonDown(sender As Object, e As MouseButtonEventArgs) Handles dataGrid.PreviewMouseRightButtonDown
        RaiseEvent PreviewMouseRightButtonDown(Me, e)
    End Sub

    Public Shadows Event PreviewMouseDoubleClick(sender As Object, e As MouseButtonEventArgs)
    Private Sub dataGrid_PreviewMouseDoubleClick(sender As Object, e As MouseButtonEventArgs) Handles dataGrid.PreviewMouseDoubleClick
        RaiseEvent PreviewMouseDoubleClick(Me, e)
    End Sub

    Public Event Sorting(sender As Object, e As DataGridSortingEventArgs)
    Private Sub dataGrid_Sorting(sender As Object, e As DataGridSortingEventArgs) Handles dataGrid.Sorting
        RaiseEvent Sorting(Me, e)
    End Sub

    Public Event ColumnFilterChanged(sender As Object, e As ColumnFilterChangedEventArgs)


#End Region

#Region "Functions"

    Public Function ColumnFromDisplayIndex(displayIndex As Integer) As DataGridColumn
        Return dataGrid.ColumnFromDisplayIndex(displayIndex)
    End Function

#End Region

#Region "Methods"

    'Public Sub SetColumnFilter(ColumnName As String, RowFilter As String)
    '    If Filters.ContainsKey(ColumnName) Then
    '        Filters(ColumnName) = RowFilter
    '    Else
    '        Throw New Exception("ColumnName '" & ColumnName & "' not found.")
    '    End If
    'End Sub

    'Public Sub SetStaticColumn(ColumnName As String, IsStatic As Boolean)
    '    Dim btn As Button = Nothing
    '    GetSortButton(Of Button)(dataGrid, ColumnName, btn)
    '    'Debug.WriteLine("btn is nothing: " & (btn Is Nothing).ToString)
    '    If btn IsNot Nothing Then
    '        btn.Visibility = If(IsStatic, Visibility.Collapsed, Visibility.Visible)
    '    End If
    'End Sub

    Public Structure MessageFormat
        Dim FontFamily As FontFamily
        Dim FontSize As Double
        Dim FontStretch As FontStretch
        Dim FontStyle As FontStyle
        Dim FontWeight As FontWeight
        Dim Foreground As Brush
        Dim Background As Brush
        Dim HorizontalAlignment As HorizontalAlignment
        Dim VerticalAlignment As VerticalAlignment
    End Structure

    Public Sub ShowMessage(msg As String, Optional ByVal MsgFormat As MessageFormat? = Nothing)
        With txtMessage
            .Text = msg
            If MsgFormat.HasValue Then
                Dim mf As MessageFormat = MsgFormat.Value
                .FontFamily = mf.FontFamily
                .FontSize = mf.FontSize
                .FontStretch = mf.FontStretch
                .FontStyle = mf.FontStyle
                .FontWeight = mf.FontWeight
                .Foreground = mf.Foreground
                .Background = mf.Background
                .HorizontalContentAlignment = mf.HorizontalAlignment
                .VerticalContentAlignment = mf.VerticalAlignment
            End If
            .Visibility = Visibility.Visible
        End With
        dataGrid.Visibility = Visibility.Collapsed
    End Sub

    Public Sub HideMessage()
        dataGrid.Visibility = Visibility.Visible
        txtMessage.Visibility = Visibility.Collapsed
        txtMessage.Text = ""
    End Sub

#End Region


    Private Sub dataGrid_MouseMove(sender As Object, e As MouseEventArgs) Handles dataGrid.MouseMove
        Dim dg As DataGrid = TryCast(sender, DataGrid)
        If dg IsNot Nothing AndAlso dg.SelectedItem IsNot Nothing AndAlso e.LeftButton = MouseButtonState.Pressed AndAlso TypeOf e.OriginalSource Is TextBlock Then
            DragDrop.DoDragDrop(dg, New DataObject(GetType(DataRowView), dg.SelectedItem), DragDropEffects.Move)
        End If
    End Sub

    Private FavoritesFile As String = IO.Path.Combine(IO.Path.GetDirectoryName(System.Reflection.Assembly.GetEntryAssembly().Location), "DataGridFavorites.cfg")

    Private Sub btnAddFavorite_Click(sender As Object, e As RoutedEventArgs)
        Dim FavoriteName As String = InputBox("Enter a short name for this favorite", "Create Favorite")
        If FavoriteName = "" Then Exit Sub
        Dim sb As New StringBuilder
        For Each key As String In RowFilterDefinitions.Keys
            If RowFilterDefinitions.Item(key).ToString <> "(1=1)" Then
                sb.AppendLine(Name & Chr(31) & FavoriteName & Chr(31) & "rf" & Chr(31) & key & Chr(31) & RowFilterDefinitions.Item(key).ToString)
            End If
        Next
        For Each key As String In SortDescriptions.Keys
            If IsNumeric(SortDescriptions.Item(key)) Then
                sb.AppendLine(Name & Chr(31) & FavoriteName & Chr(31) & "sd" & Chr(31) & key & Chr(31) & SortDescriptions.Item(key).ToString)
            End If
        Next
        If sb.Length = 0 Then
            MsgBox("No sort or filter in effect. Favorite not added.", MsgBoxStyle.Exclamation)
            Exit Sub
        End If
        IO.File.AppendAllText(FavoritesFile, sb.ToString)
        LoadFavoriteButtons()
    End Sub

    Private Sub itmDeleteFavorite_Click(sender As Object, e As RoutedEventArgs)
        Dim itm As MenuItem = DirectCast(sender, MenuItem)
        Dim Fav As String = itm.Tag.ToString
        Dim sb As New StringBuilder

        Using sr As New IO.StreamReader(FavoritesFile)
            Do Until sr.EndOfStream
                Dim line As String = sr.ReadLine
                Dim tmp As String() = line.Split(Chr(31))

                If tmp.Length = 5 Then
                    If Not (tmp(0) = Name AndAlso tmp(1) = Fav) Then
                        sb.AppendLine(line)
                    End If
                End If
            Loop
            sr.Close()
        End Using

        IO.File.WriteAllText(FavoritesFile, sb.ToString)
        LoadFavoriteButtons()
    End Sub

    Private Sub LoadFavoriteButtons()
        Debug.WriteLine("LoadFavoriteButtons: " & Name)
        If _HideFavoritesBar Then
            Debug.WriteLine("HideFavoritesBar: True")
            Exit Sub
        End If
        Debug.WriteLine("Found Buttons: " & FindVisualChildren(Of Button)(toolBar).Count)
        For Each btn As Button In FindVisualChildren(Of Button)(toolBar)
            If btn.Name <> "btnAddFavorite" Then
                Debug.WriteLine("Removing Favorite: " & btn.Name)
                RemoveHandler btn.Click, AddressOf ApplyFavorite
                Dim cmFav As ContextMenu = btn.ContextMenu
                Dim itm As MenuItem = DirectCast(cmFav.Items(0), MenuItem)
                Debug.WriteLine("Removing Favorite: " & btn.Tag.ToString)
                RemoveHandler itm.Click, AddressOf itmDeleteFavorite_Click
                toolBar.Items.Remove(btn)
            End If
        Next

        If IO.File.Exists(FavoritesFile) Then
            Using sr As New IO.StreamReader(FavoritesFile)
                Dim CurrentButtonName As String = ""
                Dim btn As Button = Nothing
                Dim btnNum As Integer = 0
                Dim imgNum As Integer = 0
                Do Until sr.EndOfStream
                    Dim tmp As String() = sr.ReadLine.Split(Chr(31))
                    If tmp.Length = 5 AndAlso tmp(0) = Name Then
                        If tmp(1) <> CurrentButtonName Then
                            CurrentButtonName = tmp(1) : btnNum += 1 : imgNum = If(btnNum > 15, btnNum - 15, btnNum)
                            Dim tb As New TextBlock With {.Text = tmp(1).ToString, .VerticalAlignment = VerticalAlignment.Center}
                            Dim sp As New StackPanel With {.Orientation = Orientation.Horizontal, .Height = 24, .VerticalAlignment = VerticalAlignment.Center}
                            Dim img As Image = GetResourceIconByName(imgNum.ToString & ".ico")
                            img.Height = 16 : img.Width = 16
                            sp.Children.Add(img)
                            sp.Children.Add(tb)
                            Dim itm As New MenuItem With {.Header = "Delete Favorite: " & tmp(1).ToString, .Tag = tmp(1).ToString, .Icon = GetResourceIconByName("DelFav.ico")}
                            AddHandler itm.Click, AddressOf itmDeleteFavorite_Click
                            Dim cmFav As New ContextMenu
                            cmFav.Items.Add(itm)
                            btn = New Button With {.Name = "btn" & btnNum.ToString, .Content = sp, .Height = 24, .ContextMenu = cmFav, .VerticalAlignment = VerticalAlignment.Center, .Tag = tmp(1)}
                            AddHandler btn.Click, AddressOf ApplyFavorite
                            toolBar.Items.Add(btn)
                            Debug.WriteLine("Added Favorite: " & itm.Tag.ToString)
                        End If
                    End If
                Loop
                sr.Close()
            End Using
        End If
    End Sub

    Private Sub ApplyFavorite(sender As Object, e As RoutedEventArgs)
        Dim btn As Button = DirectCast(sender, Button)
        Dim Fav As String = btn.Tag.ToString
        Debug.WriteLine("ApplyFavorite: " & Fav)

        Dim keys As New List(Of String)
        For Each key As String In Filters.Keys
            keys.Add(key)
        Next
        For Each key As String In keys
            Filters.Item(key) = "(1=1)"
        Next
        keys.Clear()
        For Each key As String In SortDirections.Keys
            keys.Add(key)
        Next
        For Each key As String In keys
            SortDirections.Item(key) = Nothing
        Next

        Using sr As New IO.StreamReader(FavoritesFile)
            Do Until sr.EndOfStream
                Dim tmp As String() = sr.ReadLine.Split(Chr(31))
                If tmp.Length = 5 AndAlso tmp(0) = Name AndAlso tmp(1) = Fav Then
                    Select Case tmp(2).ToString
                        Case "rf" : Filters.Item(tmp(3).ToString) = tmp(4).ToString
                        Case "sd" : SortDirections.Item(tmp(3).ToString) = If(IsNumeric(tmp(4)), CInt(tmp(4)), If(tmp(4).ToString = "Ascending", 0, 1))
                    End Select
                End If
            Loop
        End Using

        ApplyRowFilters(True)
        ApplySortDescriptions()
        SetColumnSortImages()
        RaiseEvent ColumnFilterChanged(Me, Nothing)
    End Sub

    Private Iterator Function FindVisualChildren(Of T As DependencyObject)(depObj As DependencyObject) As IEnumerable(Of T)
        If depObj IsNot Nothing Then
            For i As Integer = VisualTreeHelper.GetChildrenCount(depObj) - 1 To 0 Step -1
                Dim child As DependencyObject = VisualTreeHelper.GetChild(depObj, i)
                If child IsNot Nothing AndAlso TypeOf child Is T Then
                    Yield DirectCast(child, T)
                End If

                For Each childOfChild As T In FindVisualChildren(Of T)(child)
                    Yield childOfChild
                Next
            Next
        End If
    End Function

    Private Function GetResourceIconByName(Name As String) As Image
        Dim img As New Image
        Dim bmp As New BitmapImage
        bmp.BeginInit()
        bmp.UriSource = New Uri($"pack://application:,,,/AdvancedSortFilterDataGrid;component/Resources/{Name}")
        bmp.EndInit()
        img.Source = bmp
        Return img
    End Function

End Class
